def isReleaseBranch() {
    env.BRANCH_NAME ==~ /develop/ || env.BRANCH_NAME ==~ /master/ || env.BRANCH_NAME ==~ /release\/.*/
}

def abortPreviousRunningBuilds() {
  def hi = Hudson.instance
  def pname = env.JOB_NAME.split('/')[0]
  def bname = env.JOB_NAME.split('/')[1]  // branch name

  try {
      hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each{ build ->
          def exec = build.getExecutor()

          if (build.number != currentBuild.number && exec != null) {
            exec.interrupt(
              Result.ABORTED,
              new CauseOfInterruption.UserInterruption(
                "Aborted by ${pname} - ${bname} #${currentBuild.number}"
              )
            )
            println("${pname} - ${bname} / ${env.JOB_BASE_NAME} : Aborted previous running build #${build.number}")
          } else {
            println("${pname} - ${bname} / ${env.JOB_BASE_NAME} : Build is not running or is already built, not aborting #${build.number}")
          }
      }
  } catch(NullPointerException e) {
      // happens the first time if there is no branch at all
  } finally {
      // carry on as if nothing went wrong
  }

} // abortPreviousRunningBuilds

def notifyMe() {
  //// send to Slack
  //slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
  //
  //// send to HipChat
  //hipchatSend (color: 'YELLOW', notify: true,
  //    message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
  //)

  def content = '${SCRIPT, template="pipeline.template"}'
  //to: "${GIT_AUTHOR_EMAIL}"

  // send to email
  emailext (
      subject: ("${currentBuild.result}: ${env.JOB_NAME} [${env.BUILD_NUMBER} ${currentBuild.displayName}"),
      body: content,
      attachLog: false,
      compressLog: true,
      to: emailextrecipients([
          [$class: 'CulpritsRecipientProvider'],
          [$class: 'DevelopersRecipientProvider'],
          [$class: 'RequesterRecipientProvider']
      ])
    )
}

return this
